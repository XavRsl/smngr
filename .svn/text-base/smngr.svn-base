#! /bin/bash
# ---------------------------------------------------------------------------
# smngr - UVSQ Sites Manager

# Copyright 2013, root <root@neptune-l.dsi.uvsq.fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at (http://www.gnu.org/licenses/) for
# more details.

# Usage: smngr [-h|--help] [-c|--create site_name] [-u|--user name] [-m|--move site_name] [-d|--delete site_name]

# Revision history:
# 2013-01-17	Created by new_script ver. 3.0
# ---------------------------------------------------------------------------

# Source function library.
. /etc/rc.d/init.d/functions

PROGNAME=${0##*/}
VERSION="0.1"

# Application variables
users_root="/web/users"
hosts_root="/web/hosts"
bin_path="/usr/local/bin"
skel_path="/etc/SiMan/skel"
tpl_path="/etc/SiMan/templates"
http_conf="/etc/httpd/conf.d"
socks_path="/web/.socks"
lr_path="/etc/logrotate.d"
php_conf="/etc/php-fpm.d"
trash="/web/trash"

[[ $users_root && $hosts_root && $bin_path && $skel_path && $tpl_path \
&& $http_conf && $socks_path && $lr_path && $php_conf && $trash ]] \
|| error_exit "Necessary directories don't exist"

# Color variables
VERT="\\033[1;32m"
NORMAL="\\033[0;39m"
ROUGE="\\033[1;31m"
ROSE="\\033[1;35m"
BLEU="\\033[1;34m"
BLANC="\\033[0;02m"
BLANCLAIR="\\033[1;08m"
JAUNE="\\033[1;33m"
CYAN="\\033[1;36m"
STOP="\\033[0m"

INITLOG_ARGS=""
RETVAL=0

clean_up() { # Perform pre-exit housekeeping
	return
}

error_exit() {
	echo -e "${PROGNAME}: ${ROUGE}${1:-"Unknown Error"}${STOP}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)    error_exit "Program interrupted by user" ;;
		TERM)   echo -e "\n$PROGNAME: Program terminated" >&2 ; graceful_exit ;;
		*)      error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help] [-c|--create site_name] [-u|--user name] [-m|--move site_name] [-d|--delete site_name]"
}

help_message() {
	cat <<- _EOF_
	$PROGNAME ver. $VERSION
	UVSQ Sites Manager

	$(usage)

	Options:
	-h, --help			display this help message and exit.
	-c, --create site_name		create Site
                                where 'site_name' is the Site name (eg. www.dsi.uvsq.fr).
	-u, --user user_name		user associated with the site
                                where 'user_name' is the Name of the user associated with the site.
	-m, --move site_name		move the site (requires user argument : -u)
                                where 'site_name' is the name of the site to move.
	-d, --delete site_name		delete a site
                                where 'site_name' is the The name of the site to delete.
	-l, --list           		list sites installed on this server
	-r, --restart       		restart apache and php-fpm servers

	NOTE: You must be the superuser to run this script.

	_EOF_
	return
}

## Main Functions

# Validation
validate_site_name() {
	echo -n "Validating Site name : "
	if [[ $1 =~ ^(www.)?([0-9a-z\.-]+)\.([a-z\.]{2,6})$ ]]; then
		success
		echo
		return
	else 
		failure
		echo
		error_exit "$1 is not a valid site name. Please try again."
	fi
}
# validate_site_dns() {}
validate_site_exists() {
	echo -n "Validating Site exists : "
	if [[ -d $hosts_root/$1 ]]; then
		success
		echo
		return
	else 
		failure
		echo
		error_exit "$1 doesn't exist on this server. Please try again."
	fi
}
validate_user_name() {
	echo -n "Validating User name : "
	if [[ $1 =~ ^[a-z0-9_-]{3,15}$ ]]; then
		success
		echo
		return
	else 
		failure
		echo
		error_exit "$1 is not a valid username. Please try again."
	fi
}
validate_user_exists() {
	echo -n "Validating User exists : "
	if [[ -d $users_root/$1 ]]; then
		success
		echo
		return
	else 
		# echo -e "$BLANCLAIR""[NO]""$STOP"
		failure "User $1 doesn't exist"
		echo
		read -p "User $1 doesn't exist. Create it [y/n] > "
		[[ $REPLY =~ ^[yY]$ ]] || return 1
		create_user $1
	fi
}
# validate_database_name() {}
# validate_database_exists() {}

# Main Actions
list_sites() {
	echo "Listing existing sites on this server : "
	ls $hosts_root
}
create_user() {
	# Il faut mettre plus de conditions, dossier existe ? user dans vipw ? groupe dans vigr ?
	if [[ -d $users_root/$user_name ]]; then
		echo -n "User exists : "
		success
		echo
		return
	else
		echo -n "Creating User : "
		groupadd $user_name
		useradd -g $user_name -G ftpusers -d $users_root/$user_name/ -s /usr/libexec/openssh/sftp-server -c "Utilisateur $user_name" -m $user_name
		## Home dir has to belong to root for chroot jail to work
		chown root:root $users_root/$user_name
		chmod 755 $users_root/$user_name
		success
		echo
		return
	fi
}

delete_user() {
	if [[ $1 ]]; then
		user_name_to_delete=$1
	else
		user_name_to_delete=$user_name
	fi
	# Is there still a site remaining for this user ?
	count_user_sites=`find $users_root/$user_name_to_delete -maxdepth 1 -mindepth 1 -type d -print | wc -l`
	if ((count_user_sites == 0)); then
		read -p "User $user_name_to_delete has no more site on the server. Delete user ? [y/n] > "
		[[ $REPLY =~ ^[yY]$ ]] || return 1
		echo -n "Deleting User : "
		userdel -rf $user_name_to_delete
		# groupdel $user_name
		success
		echo
	fi
	return
}

create_site() {
	echo -n "Creating Site : "
	mkdir $users_root/$user_name/$site_name_to_create
	cp -r $skel_path/* $users_root/$user_name/$site_name_to_create/
	chown -R $user_name:$user_name $users_root/$user_name/*
	ln -s $users_root/$user_name/$site_name_to_create $hosts_root/$site_name_to_create
	success
	echo
	return
}

delete_site() {
	echo -n "Deleting Site : "
	rm -rf $users_root/$user_name/$site_name_to_delete
	rm -f $hosts_root/$site_name_to_delete
	success
	echo
	return
}

move_site() {
	# Don't recreate files, change them...
	echo -n "Moving Site : "
	cd $hosts_root/$site_name_to_move
	old_user_name=`pwd -P | awk -F '/' '{print $4}'`
	if [[ $old_user_name == $user_name ]]; then
		failure
		echo
		error_exit "Cant' move a site to it's own place..."
	fi
	# mkdir $users_root/$user_name/$site_name_to_move
	mv $users_root/$old_user_name/$site_name_to_move $users_root/$user_name/$site_name_to_move
	chown -R $user_name:$user_name $users_root/$user_name/*
	rm -f $hosts_root/$site_name_to_move
	ln -s $users_root/$user_name/$site_name_to_move $hosts_root/$site_name_to_move
	success
	echo
	delete_user $old_user_name
	return
}

create_files() {
	echo -n "Create php-fpm pool file : "

	sed \
		-e "s/USER/$user_name/g" \
		-e "s/SITE/$site_name_to_create/g" \
		-e "s%PATH%$hosts_root%g" \
		-e "s%SOCKS%$socks_path%g" \
	$tpl_path/pool.conf > $php_conf/$site_name_to_create.conf

	success
	echo

	echo -n "Create httpd file : "

	sed \
		-e "s/USER/$user_name/g" \
		-e "s%PATH%$hosts_root%g" \
		-e "s%SOCKS%$socks_path%g" \
		-e "s/SITE/$site_name_to_create/g" \
	$tpl_path/vhost.conf > $http_conf/$site_name_to_create.conf

	success
	echo
	return
}

delete_files() {
	echo -n "Deleting files : "
	rm -f $php_conf/$site_name_to_delete.conf
	rm -f $http_conf/$site_name_to_delete.conf
	success
	echo
	return
}

move_files() {
	# logrotate = no need
	# Pool file
	echo -n "Moving php-fpm pool file : "
	# backword compatibility :
	sed -i.bck \
		-e "s%$users_root/$old_user_name%$hosts_root%g" \
		-e "s%\/$old_user_name\.sock%$/site_name_to_move.sock%g" \
		-e "s%\[$old_user_name\]%[$site_name_to_move]%g" \
		-e "s%\.$old_user_name\.log%.$site_name_to_move.log%g" \
		-e "s% $old_user_name% $user_name%g" \
	$php_conf/$site_name_to_move.conf

	success
	echo
	# Httpd file
	echo -n "Moving httpd file : "
	# backword compatibility :
	sed -i.bck \
		-e "s%$users_root/$old_user_name%$hosts_root%g" \
		-e "s%\/$old_user_name\.sock%/$site_name_to_move.sock%g" \
	$http_conf/$site_name_to_move.conf

	success
	echo
	return
}

restart_servers() {
	read -p "Do you want to restart servers now ? [y/n] > "
	[[ $REPLY =~ ^[yY]$ ]] || return 1
	cd
	/sbin/service php-fpm restart
	/sbin/service httpd restart
	return
}
# Misc
beautify() {
	echo -e "###    $(echo $1|sed 's/#\(.*\)#/\\033\[0;32m\1\\033\[0m/g')  ###"
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Check for root UID
if [[ $(id -u) != 0 ]]; then
	error_exit "You must be the superuser to run this script."
fi

# Parse command-line
while [[ -n $1 ]]; do
	case $1 in
		-h | --help)		help_message; graceful_exit ;;
		-u | --user)		shift; user_name="$1" ;;
		-c | --create)		shift; site_name_to_create="$1" ;;
		-m | --move)		shift; site_name_to_move="$1" ;;
		-d | --delete)		shift; site_name_to_delete="$1" ;;
		-l | --list)		list_sites ;;
		-r | --restart)		restart_servers ;;
		# -s | --sync)		shift; sync="$1" ;;
		# -e | --encoding)	shift; encoding="$1" ;;
		# -p | --password)	shift; password="$1" ;;
		-* | --*)	usage; error_exit "Unknown option $1" ;;
		*)		arg="$1" ;;
	esac
	shift
done

#################################################################################################
# Main logic
#################################################################################################
[[ $user_name ]] && validate_user_exists $user_name
[[ ! $site_name_to_create ]] && site_name_to_create="$arg"
# if delete with other argument, exit
if [[ $site_name_to_delete && ($site_name_to_create || $site_name_to_move || $user_name) ]]; then
	error_exit "You can't use another argument with delete."
fi
# if username without site name to move or create, exit
if [[ $user_name && ! ($site_name_to_create || $site_name_to_move) ]]; then
	error_exit "-u or --user can't be used on it's own. Use -c or -m with it."
fi
# if create and move, exit
if [[ $site_name_to_create && $site_name_to_move ]]; then
	error_exit "You can't create a site and move it at the same time."
fi
# if site name to move or create without username, exit
if [[ ! $user_name && ($site_name_to_create || $site_name_to_move) ]]; then
	error_exit "You can't create or move a site without associating a user. Use with -u."
fi

# Validations
[[ $user_name ]]						&& 	validate_user_name		$user_name
[[ $site_name_to_create ]] 				&& 	validate_site_name		$site_name_to_create
[[ $user_name && $site_name_to_move ]] 	&& 	validate_user_exists	$user_name \
											validate_site_exists	$site_name_to_move
[[ $site_name_to_delete ]] 				&& 	validate_site_exists	$site_name_to_delete

# Do the stuff
# Create Site
if [[ $site_name_to_create && $user_name ]]; then
	create_user
	create_site
	create_files
	restart_servers
fi
# Delete Site
if [[ $site_name_to_delete ]]; then
	cd $hosts_root/$site_name_to_delete
	user_name=`pwd -P | awk -F '/' '{print $4}'`
	read -p "Are you sure you want to delete site and all it's content ? [y/n] > "
	[[ $REPLY =~ ^[yY]$ ]] || return 1
	delete_site
	delete_user
	delete_files
	restart_servers
fi
# Move Site
if [[ $user_name && $site_name_to_move ]]; then
	move_site
	move_files
	restart_servers
fi



graceful_exit

